# Задача 2. Совместное проживание
# Чтобы понять, стоит ли ему жить с кем-то или лучше остаться в гордом
# одиночестве, Артём решил провести необычное исследование. Для этого он
# реализовал модель человека и модель дома.
# Человек может (должны быть такие методы):
# ● есть (+ сытость, − еда);
# ● работать (− сытость, + деньги);
# ● играть (− сытость);
# ● ходить в магазин за едой (+ еда, − деньги);
# ● прожить один день (выбирает одно действие согласно описанному ниже
# приоритету и выполняет его).
# У человека есть (должны быть такие атрибуты):
# ● имя,
# ● степень сытости (изначально 50),
# ● дом.
# В доме есть:
# ● холодильник с едой (изначально 50 еды),
# ● тумбочка с деньгами (изначально 0 денег).
# Если сытость человека становится меньше нуля, человек умирает.
# Логика действий человека определяется следующим образом:
# 1. Генерируется число кубика от 1 до 6.
# 2. Если сытость < 20, то нужно поесть.
# 3. Иначе, если еды в доме < 10, то сходить в магазин.
# 4. Иначе, если денег в доме < 50, то работать.
# 5. Иначе, если кубик равен 1, то работать.
# 6. Иначе, если кубик равен 2, то поесть.
# 7. Иначе играть.
# По такой логике эксперимента человеку надо прожить 365 дней.
# Реализуйте такую программу и создайте двух людей, живущих в одном доме.
# Проверьте работу программы несколько раз.
# Подсказка № 1
# Используйте функцию random.randint(1, 6) для моделирования броска кубика. Это
# поможет определить случайное действие, которое будет выполнять человек в течение
# дня.
# Подсказка № 2
# Определите методы для каждого действия человека (например, eat, work, play,
# shop_for_food), чтобы каждый метод изменял соответствующие атрибуты человека
# и дома (сытость, еда, деньги).
# Подсказка № 3
# Создайте класс House, в котором будут храниться ресурсы (еда и деньги). Это поможет
# легко управлять ресурсами и отслеживать их изменения в течение времени.
# Подсказка № 4
# Проверьте, не достигла ли сытость человека нуля, в методе live_day. Если сытость
# упала ниже нуля, программа должна завершиться, чтобы указать на смерть
# персонажа.
# Подсказка № 5
# Используйте цикл для моделирования жизни человека в течение 365 дней. Этот цикл
# должен вызывать метод live_day каждый день и проверять, выжил ли человек.

from random import randint

class Human:
    '''
    Человек может (должны быть такие методы):
    ● есть (+ сытость, − еда);
    ● работать (− сытость, + деньги);
    ● играть (− сытость);
    ● ходить в магазин за едой (+ еда, − деньги);
    ● прожить один день (выбирает одно действие согласно описанному ниже
    приоритету и выполняет его).
    У человека есть (должны быть такие атрибуты):
    ● имя,
    ● степень сытости (изначально 50),
    '''
    def __init__(self,name,home):
        self.name = name
        self.hung_level = 50
        self.home = home
        self.food = 0
        self.money = 20

    def work(self):
        '''работать(− сытость, + деньги)'''
        if self.hung_level>10:
            self.money+=10
            self.hung_level-=10
            return 'Поработали, заработали денег'
        else:
            return 'Слишком голоден, чтоб работать'



    def feed(self):
        ''' есть(+ сытость, − еда)'''
        if self.food<10:
            return 'Не хватает еды'
        else:
            if self.hung_level<100:
                self.hung_level+=10
                self.food -= 10
                return f' Сытость увеличена до {self.hung_level} количество еды снижено до {self.food}'

    def by_food(self):
        """ ходить в магазин за едой(+ еда, − деньги)"""
        if self.money>10:
            self.food+=10
            self.money-=10
            return "Потратили денег, купили еды"


    def __str__(self):
        return f'{self.name=} {self.hung_level=} {self.money=} {self.food=} {self.home.__str__()}'

class Home:
    '''
    # В доме есть:
    # ● холодильник с едой (изначально 50 еды),
    # ● тумбочка с деньгами (изначально 0 денег).
    '''
    __id = 0
    def __init__(self,refr=50,money=0):
        self.refr = refr
        self.money = money
        Home.__id+=1
        self.id = Home.__id
    def __str__(self):
        return f' Дом №{self.id}'

def gen_move():
    num = randint(1,6)
    match num:
        case 1:
            print ('Генерируется число кубика от 1 до 6.')
        case 2:
            print ('Если сытость < 20, то нужно поесть.')
        case 3:
            print ('Иначе, если еды в доме < 10, то сходить в магазин.')
        case 4:
            print ('Иначе, если денег в доме < 50, то работать.')
        case 5:
            print ('Иначе, если кубик равен 1, то работать.')
        case 6:
            print ('Иначе, если кубик равен 2, то поесть.')
        case _: print('ошибка генерации')

    return num


home1 = Home()
hum1 = Human('Иван',home1)
print(hum1.by_food())
print(hum1.__str__())
print(hum1.feed())
print(hum1.feed())
print(hum1.__str__())
print(hum1.work())
print(hum1.work())
print(hum1.__str__())
moveset =set()
for _ in range(150):
    moveset.add(gen_move())
print (moveset)


